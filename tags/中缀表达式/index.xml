<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>中缀表达式 - Tag - Coding Panda&#39;s Blog</title>
    <link>https://zhiwayzhang.github.io/tags/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
    <description>中缀表达式 - Tag - Coding Panda&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>zhiweizhang@hust.edu.cn (Zhiwei Zhang)</managingEditor>
      <webMaster>zhiweizhang@hust.edu.cn (Zhiwei Zhang)</webMaster><lastBuildDate>Wed, 07 Oct 2020 22:03:17 &#43;0000</lastBuildDate><atom:link href="https://zhiwayzhang.github.io/tags/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
  <title>中缀表达式求值</title>
  <link>https://zhiwayzhang.github.io/posts/zhongzhui/</link>
  <pubDate>Wed, 07 Oct 2020 22:03:17 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/zhongzhui/</guid>
  <description><![CDATA[中缀表达式求值 对于表达式求值，我们通常用栈来操作。 常用的做法是先转换为后缀表达式，再利用栈来求值。 步骤如下：
开一个栈一个储存运算符，再开一个结构存后缀表达式，可以选择string数组 每遇到一个数字，将其加入到后缀表达式种 遇到左括号，加入到符号栈种 遇到右括号，不断将栈顶元素添加到后缀表达式中，直到遇到左括号，然后弹出左括号 遇到普通运算符，只要栈顶符号的优先级不低于新符号，就不断取出栈顶元素存到后缀表达式，然后将新符号入栈，优先级顺序为乘除&gt;加减&gt;左括号 依次取出符号栈中剩余元素，加入到后缀表达式中 将得到的后缀表达式求值 Note 代码在取栈顶元素时容易出错，需要注意对栈为空时的判断
Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 #include &lt;cstdio&gt; #include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;cstring&gt; #include &lt;string&gt; #include &lt;queue&gt; #include &lt;cmath&gt; #include &lt;stack&gt; #include &lt;map&gt; #include &lt;set&gt; #define mem(a,b) memset(a,b,sizeof(a)) #define debug cout&lt;&lt;0&lt;&lt;endl #define ll long long const int MAXN = 1e4 + 10; const int MOD = 1e9 + 7; using namespace std; stack&lt;int&gt; stnumber; stack&lt;char&gt; stsign; stack&lt;int&gt; ans; struct node { string s=&#34;&#34;; } a[MAXN]; int oder(char c) { if (c == &#39;+&#39; || c == &#39;-&#39;) return 1; else if (c == &#39;*&#39; || c == &#39;/&#39;) return 2; return 0; } int toInt(string ss) { int res = 0; for (int i = 0; i &lt; ss.]]></description>
</item>
</channel>
</rss>
