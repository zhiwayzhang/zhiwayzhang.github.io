<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Algorithm - Category - Coding Panda&#39;s Blog</title>
    <link>https://zhiwayzhang.github.io/categories/algorithm/</link>
    <description>Algorithm - Category - Coding Panda&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>zhiweizhang@hust.edu.cn (Zhiwei Zhang)</managingEditor>
      <webMaster>zhiweizhang@hust.edu.cn (Zhiwei Zhang)</webMaster><lastBuildDate>Fri, 10 Dec 2021 12:46:33 &#43;0000</lastBuildDate><atom:link href="https://zhiwayzhang.github.io/categories/algorithm/" rel="self" type="application/rss+xml" /><item>
  <title>【算法题】幸运数字</title>
  <link>https://zhiwayzhang.github.io/posts/luckynumber/</link>
  <pubDate>Fri, 10 Dec 2021 12:46:33 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/luckynumber/</guid>
  <description><![CDATA[<h1 id="description">Description</h1>
<p>给定一个数字N，给定一个数字的集合，使用集合里的数字构造出小于数字N的最大数。</p>
<p>如N = 23131，集合为{2, 4, 9}</p>
<p>则构造出22999</p>]]></description>
</item>
<item>
  <title>【leetcode-179】最大数</title>
  <link>https://zhiwayzhang.github.io/posts/leetcode-179/</link>
  <pubDate>Thu, 09 Dec 2021 21:22:30 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/leetcode-179/</guid>
  <description><![CDATA[<p><a href="https://leetcode-cn.com/problems/largest-number/"target="_blank" rel="external nofollow noopener noreferrer">https://leetcode-cn.com/problems/largest-number/</a></p>
<h1 id="description">Description</h1>
<p>给定一组非负整数 <code>nums</code>，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。</p>
<p>注意：输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p>]]></description>
</item>
<item>
  <title>方程求根的迭代法</title>
  <link>https://zhiwayzhang.github.io/posts/equtaion/</link>
  <pubDate>Sun, 25 Apr 2021 13:04:57 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/equtaion/</guid>
  <description><![CDATA[<h1 id="迭代法求解方程的根">迭代法求解方程的根</h1>
<p>求解方程的根，即$f(x)=0$的数值解等问题，对于经典的二次方程等函数我们可以直接进行求解，但是对于超越方程我们不能用常规方法进行求解。因此我们可以通过使用计算机实现某些求解算法进行计算。</p>
<p>选取样例</p>
<p>$f(x) =x^3 - x - 2$</p>
<p>$\frac{dy}{dx} = 3x^2-1$</p>
<p>求解$f(x)$在[1, 2]上的零点</p>]]></description>
</item>
<item>
  <title>迭代法求解线性方程组</title>
  <link>https://zhiwayzhang.github.io/posts/matrix/</link>
  <pubDate>Sun, 25 Apr 2021 00:38:16 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/matrix/</guid>
  <description><![CDATA[求解线性方程组 在线性代数中，有一类经典问题，就是求解线性方程组，我们熟知的解法有高斯消元法，但是高斯消元法属于直接求解的方法，不适合编程计算，因此引入更适合计算机求解的迭代法。
以线性方程组：
$ \left[ \begin{matrix} 10 &amp; -1 &amp; -2 \ -1 &amp; 10 &amp; -2 \ -1 &amp; -1 &amp; 5 \end{matrix} \right] x = \left[ \begin{matrix} 7.2 \ 8.3 \ 4.2 \end{matrix} \right] $ 为例
Jacobi迭代法 考虑线性方程组$Ax=b$
用L和U分别表示严格下三角矩阵和严格上三角矩阵
可以利用迭代公式
$x^{k+1}=D^{-1}(b-(L+U)x^{k}))$
进行迭代求解，可以通过精度控制迭代次数，还需要控制迭代是否收敛，不然迭代次数再多也无法求解。
迭代法需要给定解列向量的初值，因此初值的选取也很重要。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import numpy as np def Jacobi(A, B, N, x): # Ax=B N为迭代次数 # 获得对角矩阵的数组 D = np.]]></description>
</item>
<item>
  <title>常微分方程初值问题求解方法</title>
  <link>https://zhiwayzhang.github.io/posts/ode/</link>
  <pubDate>Fri, 23 Apr 2021 23:26:18 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/ode/</guid>
  <description><![CDATA[常微分方程初值问题 常微分方程描述了不同变量之间的变化关系，通过该关系我们可以确定变量之间的具体函数关系，但是微分方程不一定总是可解的，并且有些求解起来相当困难。给出积分曲线初始位置的状态，求解需要预测点的状态，为常微分方程的初值问题，我们可以在求解微分方程即的情况下对结果做出复合精度要求的预测。
以$f(x) = \sqrt{1+2x}$为例
有$y&rsquo;=\frac{dy}{dx}=y-\frac{2x}{y}$
本文给出几种算法的原理与实现。
Euler方法及其改进 从初始点开始，根据不同离散点的导数值对曲线进行预测，导数值可以通过对ODE的化简求解，做出一条折线图，最终曲线会逼近预测值。
该方法有明显的缺点就是在每一步做出抉择时，只考虑了当前的状态，并没有考虑后面的状态，因此必然会造成较大的误差，因此采用下一个结点的导数值进行修正。
具体流程如下
选取一定的步长h，一般为区间的n等分
预测下一个值$\overline{y}_{i+1} = y_i + hf(x_i, y_i)$
校正预测值$y_{i+1} = y_i + \frac{h}{2}[f(x_i, y_i)+f(x_{i+1}, \overline{y}_{i+1})]$
改写成平均化形式
$y_p = y_i +hf(x_i, y_i)$
$y_c = y_i + hf(x_{i+1}, y_p)$
$y_{i+1} = \frac{1}{2} (y_p+y_c), i =0,1,2,3,&hellip;,n-1$
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import numpy as np # 常微分方程化简 def ode(x, y): return y - 2 * x / y def f(x): return np.]]></description>
</item>
<item>
  <title>数值积分方法</title>
  <link>https://zhiwayzhang.github.io/posts/integration/</link>
  <pubDate>Fri, 23 Apr 2021 20:18:59 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/integration/</guid>
  <description><![CDATA[数值积分 应用背景：微积分的基本计算公式为经典的牛顿莱布尼茨公式，但是作为计算机来说，计算原函数等操作过于困难，因此需要其他方法进行优化，代替牛顿莱布尼茨公式进行计算，本文将分享两种求积公式及其代码实现。
使用语言： Python-Numpy
使用两种方法计算$f(x)=sin(x)$在[1,2]上的积分
复化梯形的递推公式 由梯形公式改进，将区间[a, b]等分为n个小区间 $[x_i, x_{i+1}]$
$\int_{a}^{b}f(x)dx=\sum_{i=0}^{n-1}\int_{x_i}^{x_{i+1}}f(x)dx\approx \frac{h_i}{2}[f(x_i)+f(x_{i+1})]$
根据梯形公式化简为区间端点值组合
将求和公式展开，分离出左右端点
得到最终的化简结果
$T_n = \frac{h}{2} [f(a)+2\sum_{i=1}^{n-1}f(x_i)+f(b)]$
但是该方法的步长太小的话会导致计算次数太大，步长太大又难以保证效率
采用区间不断对分的方法，取$n = 2^k$，反复使用复合求积公式
$T^{(k)}=\frac{1}{2}T^{(k-1)}+\frac{h_{k-1}}{2}\sum_{i=0}^{2^{k-1}-1}f(a+ih_{k-1} + 0.5h_{k-1})$
其中$h_{k-1} = \frac{b-a}{2^{k-1}}$
Code
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import numpy as np def f(x): return np.sin(x) def Calc(): eps = 1e-7 Flag = True l = 1.]]></description>
</item>
<item>
  <title>三种插值方法及实现</title>
  <link>https://zhiwayzhang.github.io/posts/newtown/</link>
  <pubDate>Mon, 19 Apr 2021 22:22:57 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/newtown/</guid>
  <description><![CDATA[插值方法 插值属于数值分析领域中的一种方法，是一种通过已知的离散的数据点，来拟合原函数根据给定的自变量估算因变量的方法。
常用的插值方法有很多，本文章给出三种常见的插值方法的实现。
使用语言: Python
使用下面的数据，预测函数在x=1处的值
1 2 x = np.array([0.5, 0.6, 0.4, 0.7]) y = np.array([-0.6931, -0.5108, -0.9163, -0.3567]) 线性插值 线性插值及求一次多项式$p(x)$，满足$p(x_0), p(x_1) = y_1$ 可以根据点斜式方程求解 即
$p(x) =y_0 \frac{y_{1}-y_{0}}{x_1-x_0}(x-x_0)$ 还可以将公式整理成如下形式
$p(x) = y_0 \frac{x - x_1}{x_0 - x_1} + y_1 \frac{x- x_0}{x_1 - x_0}$
我们令这里的$l_0(x)=\frac{x-x_1}{x_0 - x_1}, l_1(x)=\frac{x-x_0}{x_1-x_0}$
将其线性组合之后即为
$p(x)=y_0 l_0(x)+y_1 l_1(x)$
是Lagrange插值的特殊形式
此处给出线性插值的代码实现：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import numpy as np def linear(x, y, x0): &#39;&#39;&#39; x : 为横坐标数组 y : 为纵坐标数组 x0: 为需要预测点的横坐标 res: 预测结果 &#39;&#39;&#39; res = y[1] + (y[1] - y[0])*(x0 - x[1])/(x[1] - x[0]) # 根据公式计算结果 return res x = np.]]></description>
</item>
<item>
  <title>Luogu3964-松鼠聚会</title>
  <link>https://zhiwayzhang.github.io/posts/luogu3964/</link>
  <pubDate>Sun, 11 Oct 2020 19:45:39 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/luogu3964/</guid>
  <description><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3964"target="_blank" rel="external nofollow noopener noreferrer">Luogu3964</a></p>
<h2 id="description">Description</h2>
<p>草原上住着一群小松鼠，每个小松鼠都有一个家。时间长了，大家觉得应该聚一聚。但是草原非常大，松鼠们都很头疼应该在谁家聚会才最合理。
每个小松鼠的家可以用一个点$(x,y)$表示,两个点的距离定义为点 $(x,y)$ 和它周围的8个点 $(x-1,y)，(x+1,y),(x,y-1)，(x,y+1)$
$(x−1,y+1),(x-1,y-1),(x+1,y+1),(x+1,y-1)$距离为1。输出一个整数，表示松鼠为了聚会走的路程和最小是多少。</p>]]></description>
</item>
<item>
  <title>51nod3143-切比雪夫距离与曼哈顿距离</title>
  <link>https://zhiwayzhang.github.io/posts/51nod3143/</link>
  <pubDate>Sun, 11 Oct 2020 19:45:25 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/51nod3143/</guid>
  <description><![CDATA[<p><a href="https://www.51nod.com/Challenge/Problem.html#problemId=3143"target="_blank" rel="external nofollow noopener noreferrer">51nod3143</a></p>
<h2 id="description">Description</h2>
<p>n位战士即将奔赴战场，他们每个人都有一个攻击值ai和一个防御值bi，现在你想设计一种装备给这n位战士，如果这件装备的攻击值为A，防御值为B，那么对于第i位战士这件装备的不匹配度为$max(|A−a_i|,|B−b_i|)$
A，B都是正整数，要让所有战士的不匹配度之和最小，求出最小的不匹配度之和$2\le N \le 100000$</p>]]></description>
</item>
<item>
  <title>莫队-小B的询问洛谷P2709</title>
  <link>https://zhiwayzhang.github.io/posts/modui/</link>
  <pubDate>Wed, 07 Oct 2020 22:04:49 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/modui/</guid>
  <description><![CDATA[Description P2709 小B 有一个长为n的整数序列$a$，值域为$[1,k]$。 他一共有m个询问，每个询问给定一个区间$[l,r]$ 求：$\sum_{i=1}^k c_i^2$ 其中 $c_i$ 表示数字 $i$ 在$[l,r]$ 中的出现次数。 小B请你帮助他回答询问。
Solution 莫队算法板子题 mark
Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include &lt;cstdio&gt; #include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;cstring&gt; #include &lt;string&gt; #include &lt;queue&gt; #include &lt;cmath&gt; #include &lt;map&gt; #include &lt;set&gt; #define mem(a,b) memset(a,b,sizeof(a)) #define debug cout&lt;&lt;0&lt;&lt;endl #define ll long long const int MAXN = 5e4 + 10; const int MOD = 1e9 + 7; using namespace std; struct Q{ int l, r, k; } q[MAXN]; int N, M, K; int pos[MAXN], a[MAXN], cnt[MAXN]; ll ans[MAXN]; ll res; inline void Add(int n) { cnt[a[n]]++; res += 2ll*cnt[a[n]] - 1; } inline void Sub(int n) { cnt[a[n]]--; res -= 2ll*cnt[a[n]] + 1; } int main() { ios::sync_with_stdio(false); cin.]]></description>
</item>
</channel>
</rss>
