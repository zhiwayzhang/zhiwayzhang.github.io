<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>计算机网络 on Coding_Panda&#39;s Blog</title>
        <link>https://blog.ipandai.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
        <description>Recent content in 计算机网络 on Coding_Panda&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 05 Mar 2022 10:32:46 +0000</lastBuildDate><atom:link href="https://blog.ipandai.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>计算机网络自顶向下</title>
        <link>https://blog.ipandai.club/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/</link>
        <pubDate>Sat, 05 Mar 2022 10:32:46 +0000</pubDate>
        
        <guid>https://blog.ipandai.club/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/</guid>
        <description>&lt;h1 id=&#34;dns&#34;&gt;DNS&lt;/h1&gt;
&lt;p&gt;使用UDP 53端口&lt;/p&gt;
&lt;h2 id=&#34;多路复用和多路分解&#34;&gt;多路复用和多路分解&lt;/h2&gt;
&lt;h2 id=&#34;无连接运输udp&#34;&gt;无连接运输UDP&lt;/h2&gt;
&lt;p&gt;UDP无需建立连接，速度快&lt;/p&gt;
&lt;p&gt;无连接状态，不需要维护序列号，可以支持更多用户活跃（游戏服务器）&lt;/p&gt;
&lt;p&gt;首部只有8个字节，源端口号和目的端口号，长度和check sum&lt;/p&gt;
&lt;p&gt;为什么需要checksum校验和：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在路由器内存中可能有bit差错&lt;/li&gt;
&lt;li&gt;链路传输不可靠&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;checksum最终为1111111&amp;hellip;则可能无差错&lt;/p&gt;
&lt;p&gt;端到端原则：某种功能应该在较高级别提供，在较低级别上设置该功能可能会冗余&lt;/p&gt;
&lt;p&gt;UDP只能检查错误，不能纠错&lt;/p&gt;
&lt;p&gt;DNS服务采用UDP&lt;/p&gt;
&lt;p&gt;何时UDP，何时TCP？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不希望延迟报文的发送，TCP有拥塞控制机制，并容忍数据的丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可靠数据传输&#34;&gt;可靠数据传输&lt;/h2&gt;
&lt;p&gt;差错检测&lt;/p&gt;
&lt;p&gt;接收方反馈：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACK肯定确认&lt;/li&gt;
&lt;li&gt;NAK否定确认&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ACK 0接收成功，ACK 1接收失败&lt;/p&gt;
&lt;p&gt;重传，收方发现差错，发送方重传&lt;/p&gt;
&lt;p&gt;序号，检测哪个数据包出错进行重传&lt;/p&gt;
&lt;p&gt;数据包可靠传输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在没有ack的情况下，等待一定的时间后进行重传&lt;/li&gt;
&lt;li&gt;序号可以保证传输不冗余（接收方检测是否冗余）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;发送方需要实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没发送或者重传一个分组，启动定时器countdown timer&lt;/li&gt;
&lt;li&gt;定时器过期后响应&lt;/li&gt;
&lt;li&gt;终止定时器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流水线可靠传输协议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用极小的数据包，接收方收到最后一bit立即ack&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gbn协议回退n步滑动窗口协议&#34;&gt;GBN协议（回退N步），滑动窗口协议&lt;/h2&gt;
&lt;p&gt;限制数据包的序号，直到相应序号ack之后再发送后续的序号，用长度为N的窗口控制。&lt;/p&gt;
&lt;p&gt;GBN发送方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送数据包时，检查发送窗口，未满则返回未发送的分组&lt;/li&gt;
&lt;li&gt;收到ack后，对分组中的序号累积确认，表明接收方，正确接收到序号为n的分组以及以前的所有分组，&lt;code&gt;[0, N]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;超时，发送方重传所有未被确认的分组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接收方收到的分组都是有序的，如果出现无序，会丢弃后面的数据包，等待重传&lt;/p&gt;
&lt;h2 id=&#34;选择重传&#34;&gt;选择重传&lt;/h2&gt;
&lt;p&gt;避免不必要的重传&lt;/p&gt;
&lt;p&gt;发送方接收方都维护一个窗口&lt;/p&gt;
&lt;p&gt;发送方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收到send base后窗口右移到第一个没确认的分组处&lt;/li&gt;
&lt;li&gt;接收ack将窗口内分组标记为ack&lt;/li&gt;
&lt;li&gt;定时器防止分组丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接收方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收的分组落在窗口内，返回ack&lt;/li&gt;
&lt;li&gt;如果序号不连续，直接缓存&lt;/li&gt;
&lt;li&gt;如果分组序号等于&lt;code&gt;rcv_base&lt;/code&gt;将从rcv base开始的已缓存分组交付给上层，窗口移动&lt;/li&gt;
&lt;li&gt;序号落在窗口之外，&lt;code&gt;[rcv_base-N, rcv_base-1]&lt;/code&gt;上一个窗口中，返回ack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;窗口长度不能太大&lt;/p&gt;
&lt;h2 id=&#34;tcp&#34;&gt;TCP&lt;/h2&gt;
&lt;p&gt;运行与端系统中，路由器等视角下看到的是数据报&lt;/p&gt;
&lt;p&gt;全双工&lt;/p&gt;
&lt;p&gt;socket是对tcp协议的封装&lt;/p&gt;
&lt;h3 id=&#34;流量控制&#34;&gt;流量控制&lt;/h3&gt;
&lt;p&gt;每一方都设置接收缓存，数据先放在缓存中，应用程序从缓存中读取数据。&lt;/p&gt;
&lt;p&gt;目的是消除发送方使接收方缓存溢出的可能。匹配发送方和接收方的读写速率。&lt;/p&gt;
&lt;p&gt;收发各自维护接收窗口。保存接收方还有多少缓存空间rwnd。&lt;/p&gt;
&lt;p&gt;发送方维持为确认的数据量在rwnd之内。&lt;/p&gt;
&lt;p&gt;如果剩余空间为0，发送方发送只有一个字节的报文。&lt;/p&gt;
&lt;p&gt;UDP没有流量控制，因此可能会出现缓冲区溢出。&lt;/p&gt;
&lt;h3 id=&#34;三次握手&#34;&gt;三次握手&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送SYN=1，随机选择一个序列号seq=x&lt;/li&gt;
&lt;li&gt;服务器读取该报文，为tcp连接分配资源，对客户端发送SYN=1，ack=x+1，seq=y（随机选取）&lt;/li&gt;
&lt;li&gt;客户端为该连接分配资源（缓存和变量），发送SYN=0，ack=y+1，seq=x+1&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么三次？
确保双方的收发能力都是正常的最小次数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;握手能不能携带数据？
第一二次握手不能携带数据，第三次握手可以携带数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;四次挥手&#34;&gt;四次挥手&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送FIN=1&lt;/li&gt;
&lt;li&gt;服务器响应ACK&lt;/li&gt;
&lt;li&gt;服务器发送FIN=1&lt;/li&gt;
&lt;li&gt;客户端发挥ACK&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;拥塞控制&#34;&gt;拥塞控制&lt;/h3&gt;
&lt;p&gt;丢包的原因？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络堵塞后，路由器缓存溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢启动&lt;/li&gt;
&lt;li&gt;快速重传&lt;/li&gt;
&lt;li&gt;拥塞避免&lt;/li&gt;
&lt;li&gt;快速恢复&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>图解HTTP读书笔记</title>
        <link>https://blog.ipandai.club/p/%E5%9B%BE%E8%A7%A3http%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Sun, 16 Jan 2022 22:25:00 +0000</pubDate>
        
        <guid>https://blog.ipandai.club/p/%E5%9B%BE%E8%A7%A3http%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;p&gt;图解HTTP读书笔记&lt;/p&gt;
&lt;h1 id=&#34;web及网络基础&#34;&gt;Web及网络基础&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;HTTP/0.9&lt;/code&gt; 不是http的正式标准，临时版本&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HTTP/1.0&lt;/code&gt; RFC1945&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt; 目前应用较广 RFC2616&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HTTP/2.0&lt;/code&gt; 大幅提高了web性能&lt;/p&gt;
&lt;h2 id=&#34;tcpip&#34;&gt;TCP/IP&lt;/h2&gt;
&lt;p&gt;互联网运行与TCP IP协议族之上，HTTP包含于其中&lt;/p&gt;
&lt;p&gt;ip，dns，udp，ftp，http，tcp。。。&lt;/p&gt;
&lt;p&gt;TCP/IP的分层管理&lt;/p&gt;
&lt;p&gt;应用层：决定了向用户提供服务时通信的活动，ftp，dns，http&lt;/p&gt;
&lt;p&gt;传输层：对应用层提供连接的两台计算机的数据传输，TCP Transmission Control Protocol传输控制协议和UDP User Data Protocol用户数据报协议&lt;/p&gt;
&lt;p&gt;网络层：处理网络上的数据包，数据包是网络传输的最小数据单位，规定如何传输路线，传输数据包&lt;/p&gt;
&lt;p&gt;数据链路层：处理连接网络的硬件，网络适配器NIC网卡&lt;/p&gt;
&lt;p&gt;物理层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;层次化好处：1.设计好接口，每个层次内部的设计可以自由改动 2.使设计变得更简单，应用层上的应用不需要考虑接收方的地理位置等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;iptcpdns&#34;&gt;IP、TCP、DNS&lt;/h2&gt;
&lt;h3 id=&#34;ip&#34;&gt;IP&lt;/h3&gt;
&lt;p&gt;IP协议位于网络层&lt;/p&gt;
&lt;p&gt;mac地址为网卡的固定地址，使用ARP协议（address resolution Protocol地址解析协议）凭借mac地址进行通信，解析ip到mac地址&lt;/p&gt;
&lt;p&gt;选择传输路线叫做路由选择&lt;/p&gt;
&lt;h3 id=&#34;tcp协议的可靠性&#34;&gt;TCP协议的可靠性&lt;/h3&gt;
&lt;p&gt;位于传输层&lt;/p&gt;
&lt;p&gt;将大数据块分割为报文段segment确保传输准确可靠&lt;/p&gt;
&lt;p&gt;将请求报文按照序号分为多个报文段，将每个报文段可靠的传输，收到后再根据序列号重组报文&lt;/p&gt;
&lt;p&gt;确保数据可到达：&lt;/p&gt;
&lt;p&gt;三次握手three way handshaking&lt;/p&gt;
&lt;p&gt;TCP标志 SYN synchronize和ACK acknowledgement&lt;/p&gt;
&lt;p&gt;具体过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送端发送一个带有SYN标志的数据包&lt;/li&gt;
&lt;li&gt;接收端收到后回传带有SYN/ACK标志的数据包&lt;/li&gt;
&lt;li&gt;发送端传回带有ACK标志的数据包，握手结束&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果握手中的某个阶段中断，TCP协议会再次发送相同的数据包&lt;/p&gt;
&lt;h3 id=&#34;dns&#34;&gt;DNS&lt;/h3&gt;
&lt;p&gt;域名解析&lt;/p&gt;
&lt;h2 id=&#34;uri和url&#34;&gt;URI和URL&lt;/h2&gt;
&lt;p&gt;URL是URI的子集&lt;/p&gt;
&lt;h1 id=&#34;http协议&#34;&gt;HTTP协议&lt;/h1&gt;
&lt;p&gt;http是无状态协议&lt;/p&gt;
&lt;p&gt;使用cookie管理状态&lt;/p&gt;
&lt;p&gt;使用URI定位资源&lt;/p&gt;
&lt;p&gt;持久连接：任意一端未提出断开，则保持tcp连接状态，减少tcp连接重复建立和断开的开销&lt;/p&gt;
&lt;p&gt;HTTP 1.1中，所有连接默认为持久连接&lt;/p&gt;
&lt;p&gt;pipeline技术：连续发送请求，不必等待上一个请求返回&lt;/p&gt;
&lt;h2 id=&#34;cookie&#34;&gt;Cookie&lt;/h2&gt;
&lt;p&gt;服务器响应报文中Set-Cookie header字段，告知客户端保存&lt;/p&gt;
&lt;p&gt;客户端再次请求时自动在header中加入cookie&lt;/p&gt;
&lt;h1 id=&#34;http报文&#34;&gt;HTTP报文&lt;/h1&gt;
&lt;p&gt;换行符CR+LF，CR回车符&lt;code&gt;0x0d&lt;/code&gt;，LF换行符&lt;code&gt;0x0a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;header + CR+LF + Body&lt;/p&gt;
&lt;p&gt;报文message是通信基本单位，8位组字节流&lt;/p&gt;
&lt;p&gt;实体entity 请求或响应的在和，包含实体header和实体body&lt;/p&gt;
&lt;p&gt;传输过程中可以对实体进行压缩&lt;/p&gt;
&lt;p&gt;实体可以分割传输&lt;/p&gt;
&lt;h2 id=&#34;获取部分内容的请求&#34;&gt;获取部分内容的请求&lt;/h2&gt;
&lt;p&gt;传输中断的恢复机制&lt;/p&gt;
&lt;p&gt;在header中加Range&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Range: bytes= 1-5000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;断点续传&lt;/p&gt;
&lt;h1 id=&#34;http状态码&#34;&gt;HTTP状态码&lt;/h1&gt;
&lt;p&gt;1XX，正在处理 信息性状态
2XX，处理完毕 成功
3XX，重定向状态码
4XX，客户端错误状态码
5XX，服务器错误状态码&lt;/p&gt;
&lt;p&gt;200 OK&lt;/p&gt;
&lt;p&gt;HEAD方法不会返回body&lt;/p&gt;
&lt;p&gt;204 No Content 处理成功，但是response中不包含实体&lt;/p&gt;
&lt;p&gt;206 Partial Content 客户端进行了范围请求&lt;/p&gt;
&lt;p&gt;301 Moved Permanently 永久重定向，资源分配了新的URI&lt;/p&gt;
&lt;p&gt;302 Found 临时重定向&lt;/p&gt;
&lt;p&gt;303 See Other 客户端用GET，临时重定向（比如POST访问时返回303，需要改GET方法重定向到另一个URI）&lt;/p&gt;
&lt;p&gt;304 Not modified 我有你要的资源但是不让你访问&lt;/p&gt;
&lt;p&gt;307 Temporary Redirect 临时重定向&lt;/p&gt;
&lt;p&gt;400 Bad request&lt;/p&gt;
&lt;p&gt;401 Unauthorized&lt;/p&gt;
&lt;p&gt;403 Forbidden 不允许访问&lt;/p&gt;
&lt;p&gt;404 Not Found 找不到资源&lt;/p&gt;
&lt;p&gt;500 Internal Server Error 内部错误&lt;/p&gt;
&lt;p&gt;503 Service Unavailable 服务器超负荷&lt;/p&gt;
&lt;h1 id=&#34;web服务器&#34;&gt;Web服务器&lt;/h1&gt;
&lt;h2 id=&#34;虚拟主机&#34;&gt;虚拟主机&lt;/h2&gt;
&lt;p&gt;一台服务器可以绑定多个域名&lt;/p&gt;
&lt;p&gt;通过dns解析&lt;/p&gt;
&lt;h2 id=&#34;代理-网关-隧道&#34;&gt;代理 网关 隧道&lt;/h2&gt;
&lt;h3 id=&#34;代理&#34;&gt;代理&lt;/h3&gt;
&lt;p&gt;转发中间人&lt;/p&gt;
&lt;p&gt;每次转发会追加写入via首部&lt;/p&gt;
&lt;p&gt;代理服务功能：缓存技术，访问控制，获取日志&lt;/p&gt;
&lt;p&gt;缓存代理：将资源缓存在代理服务器上，不从原服务器获取（有点像redis&lt;/p&gt;
&lt;p&gt;透明代理：转发请求和响应，不添加其他内容&lt;/p&gt;
&lt;h3 id=&#34;网关&#34;&gt;网关&lt;/h3&gt;
&lt;p&gt;转发客户端请求到实际程序&lt;/p&gt;
&lt;p&gt;网关与服务器使用非http通信&lt;/p&gt;
&lt;h3 id=&#34;隧道&#34;&gt;隧道&lt;/h3&gt;
&lt;p&gt;在客户端和服务器直接中转，保持双方的通信连接&lt;/p&gt;
&lt;p&gt;本身不解析http请求，只传输&lt;/p&gt;
&lt;h2 id=&#34;缓存&#34;&gt;缓存&lt;/h2&gt;
&lt;p&gt;客户端缓存和服务器缓存&lt;/p&gt;
&lt;p&gt;客户端缓存存储在浏览器&lt;/p&gt;
&lt;p&gt;各种header的作用&lt;/p&gt;
&lt;h2 id=&#34;cookie相关header&#34;&gt;Cookie相关header&lt;/h2&gt;
&lt;p&gt;Set-Cookie: 后跟name=value的序列&lt;/p&gt;
&lt;p&gt;Cookie: 发送cookie&lt;/p&gt;
&lt;h1 id=&#34;https&#34;&gt;HTTPS&lt;/h1&gt;
&lt;p&gt;http缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明文被窃听&lt;/li&gt;
&lt;li&gt;不验证双方身份，可伪装&lt;/li&gt;
&lt;li&gt;无法验证完整性，可以篡改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用SSL secure socket layer或TLS transport layer security安全层传输协议&lt;/p&gt;
&lt;p&gt;SSL使用证书确定身份&lt;/p&gt;
&lt;p&gt;防止篡改：使用md5或sha-1等校验方法校验报文完整性&lt;/p&gt;
&lt;p&gt;HTTP+通信加密+证书+完整性保护&lt;/p&gt;
&lt;p&gt;通信接口部分用ssl和tls协议代替&lt;/p&gt;
&lt;p&gt;http先和ssl通信，ssl再和tcp通信&lt;/p&gt;
&lt;p&gt;非对称加密 公钥进行加密，私钥进行解密&lt;/p&gt;
&lt;h2 id=&#34;通信步骤&#34;&gt;通信步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送client hello开始ssl通信&lt;/li&gt;
&lt;li&gt;服务器响应server hello&lt;/li&gt;
&lt;li&gt;服务器发送certificate报文，包含公钥证书&lt;/li&gt;
&lt;li&gt;服务器发送server hello done&lt;/li&gt;
&lt;li&gt;客户端发送client key exchange报文响应，ssl握手部分结束&lt;/li&gt;
&lt;li&gt;客户端发送change cipher spec&lt;/li&gt;
&lt;li&gt;客户端发送finished&lt;/li&gt;
&lt;li&gt;服务器发送change cipher spec&lt;/li&gt;
&lt;li&gt;ssl连接建立成功，开始进行http请求&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        <item>
        <title>127.0.0.1,localhost和0.0.0.0暨🐼一次两次的神神秘秘的debug记录</title>
        <link>https://blog.ipandai.club/p/127.0.0.1localhost%E5%92%8C0.0.0.0%E6%9A%A8%E4%B8%80%E6%AC%A1%E4%B8%A4%E6%AC%A1%E7%9A%84%E7%A5%9E%E7%A5%9E%E7%A7%98%E7%A7%98%E7%9A%84debug%E8%AE%B0%E5%BD%95/</link>
        <pubDate>Mon, 26 Jul 2021 22:23:38 +0000</pubDate>
        
        <guid>https://blog.ipandai.club/p/127.0.0.1localhost%E5%92%8C0.0.0.0%E6%9A%A8%E4%B8%80%E6%AC%A1%E4%B8%A4%E6%AC%A1%E7%9A%84%E7%A5%9E%E7%A5%9E%E7%A7%98%E7%A7%98%E7%9A%84debug%E8%AE%B0%E5%BD%95/</guid>
        <description>&lt;h1 id=&#34;前记&#34;&gt;前记&lt;/h1&gt;
&lt;p&gt;潘达某天在本机docker部署了他的服务，但是发现无论如何都无法ping通，他冥(疯)思(狂)苦(谷)想(歌)，逛遍了GitHub上的各种issues，stack overflow上的各种回答，各种博客文章，都没有解决他的问题，直到他的mentor来到他的电脑前，一通命令猛如虎啊，发现他竟然在docker内监听了容器中的&lt;code&gt;127.0.0.1&lt;/code&gt;的端口，那必然会访问不到，检查发现原来是在服务的config中写了magic number，让服务开在了&lt;code&gt;127.0.0.1&lt;/code&gt;，在本地这样必然是没问题的，但是如果要与外部进行通信，那就要改成&lt;code&gt;0.0.0.0&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;又是一天，潘达又部署起了他的rpc服务，想在服务器上部署一个微服务然后本机去访问，测试框架是否可以通过域名通信各个微服务，然而，服务器上启动成功，本地依然迟迟无法连接，上来就是一个&lt;code&gt;curl: (7) Failed to connect to ababab.ababab port ababa: Connection refused&lt;/code&gt;，安全组也放行了对应的端口，然后他看到了一行&lt;code&gt;127.0.0.1&lt;/code&gt;，但是他感觉不是这个问题，继续debug，然后再次呼叫他的mentor，希望得到帮助，还是一顿操作猛如虎，找到了那个&lt;code&gt;127.0.0.1&lt;/code&gt;的监听服务，乐。&lt;/p&gt;
&lt;p&gt;于是，这篇blog就诞生了。
&lt;a class=&#34;link&#34; href=&#34;https://imgtu.com/i/WhQRUK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://z3.ax1x.com/2021/07/26/WhQRUK.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;WhQRUK.png&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h1 id=&#34;127001-和-localhost&#34;&gt;127.0.0.1 和 localhost&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;127.0.0.1&lt;/code&gt;是回路地址中的一个，在计算机中&lt;code&gt;127.*.*.*&lt;/code&gt;被称为回路地址，所有对这些地址的请求都会让本机接收，最最重要的是，外部设备也不能通过这个地址访问到本机的服务。
localhost其实是一个域名，他一般指代本机的网络，大多数机器都会默认localhost指向&lt;code&gt;127.0.0.1&lt;/code&gt;，可以自行修改为其他地址。&lt;/p&gt;
&lt;h1 id=&#34;0000&#34;&gt;0.0.0.0&lt;/h1&gt;
&lt;p&gt;可能我们都会以为localhost为本地的网络地址，但实际上真正的本地网络是&lt;code&gt;0.0.0.0&lt;/code&gt;，但是他是不能被ping通的。在服务器中，&lt;code&gt;0.0.0.0&lt;/code&gt;并不是一个真实的的IP地址，它表示本机中所有的ipv4地址。监听&lt;code&gt;0.0.0.0&lt;/code&gt;的端口，就是监听本机中所有IP的端口。如果服务监听在&lt;code&gt;0.0.0.0&lt;/code&gt;，那么外部访问的所有ip都可以通过对应的端口访问这个服务。&lt;/p&gt;
&lt;p&gt;所以问题得到了解答，如果是在本机的话，127.0.0.1的话显然是没问题的，但是如果要将服务上云或者容器，就需要进行调整，首先要避开127.0.0.1，再根据是否只允许内网ip访问进行端口映射和服务监听。&lt;/p&gt;
&lt;h1 id=&#34;后记&#34;&gt;后记&lt;/h1&gt;
&lt;p&gt;这两次问题前前后后折腾了半天，本想自己找到解决办法，查了不少资料后还是要寻求运维☁️的帮助，其实问题并不是很大，还是自己的知识储备不够，不能准确定位的问题的所在。另外，计网应该开始看了。🐼。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
