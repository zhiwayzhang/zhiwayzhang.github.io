<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>NVM on Coding_Panda&#39;s Blog</title>
        <link>https://blog.ipandai.club/tags/nvm/</link>
        <description>Recent content in NVM on Coding_Panda&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 24 Sep 2022 18:26:22 +0800</lastBuildDate><atom:link href="https://blog.ipandai.club/tags/nvm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【存储技术基础】主存</title>
        <link>https://blog.ipandai.club/p/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E4%B8%BB%E5%AD%98/</link>
        <pubDate>Sat, 24 Sep 2022 18:26:22 +0800</pubDate>
        
        <guid>https://blog.ipandai.club/p/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E4%B8%BB%E5%AD%98/</guid>
        <description>&lt;h1 id=&#34;0x00-主存&#34;&gt;0x00 主存&lt;/h1&gt;
&lt;p&gt;当前面临的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;容量问题、带宽问题、QoS保证&lt;/p&gt;
&lt;p&gt;多核处理器、数据密集应用、云计算、GPU&lt;/p&gt;
&lt;p&gt;HDFS（GFS）基于外存储器&lt;/p&gt;
&lt;p&gt;Spark 内存中数据处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能耗功率问题&lt;/p&gt;
&lt;p&gt;40%功耗在DRAM，Refresh操作耗能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DRAM发展遇到瓶颈&lt;/p&gt;
&lt;p&gt;制成方式限制&lt;/p&gt;
&lt;p&gt;改进：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3D-Stack DRAM 提供更高的带宽&lt;/li&gt;
&lt;li&gt;低延迟DRAM&lt;/li&gt;
&lt;li&gt;低功耗DRAM&lt;/li&gt;
&lt;li&gt;NVM（e.g. PCM）容量更大，延迟较高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x01-dram的组成&#34;&gt;0x01 DRAM的组成&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Channel&lt;/li&gt;
&lt;li&gt;DIMM 内存条&lt;/li&gt;
&lt;li&gt;Rank 二维阵列最小单元&lt;/li&gt;
&lt;li&gt;Chip 芯片&lt;/li&gt;
&lt;li&gt;Bank&lt;/li&gt;
&lt;li&gt;Row/Column&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;行为字线 word line&lt;/p&gt;
&lt;p&gt;列为位线，交点是cell 内存单元&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20221003154123646.png&#34; alt=&#34;image-20221003154123646&#34; style=&#34;zoom:70%;&#34; /&gt;
&lt;p&gt;DRAM row是一个DRAM page&lt;/p&gt;
&lt;p&gt;Sense Amplifiers 也被叫做Row buffer&lt;/p&gt;
&lt;p&gt;每个地址通过&lt;code&gt;&amp;lt;row,colum&amp;gt;&lt;/code&gt;编址&lt;/p&gt;
&lt;p&gt;访问一个&lt;code&gt;closed row&lt;/code&gt;的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activate：将row放到row buffer中&lt;/li&gt;
&lt;li&gt;Read/Write：读写row buffer中的column&lt;/li&gt;
&lt;li&gt;Precharge：从row buffer中的数据写回到选中的row中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bank-operation&#34;&gt;Bank Operation&lt;/h2&gt;
&lt;p&gt;给定Row Address通过Row decoder选中一行&lt;/p&gt;
&lt;p&gt;将行加载到Row Buffer&lt;/p&gt;
&lt;p&gt;若读取的Row在Row Buffer中，则为命中Hit状态，通过Column Mutex直接获取数据&lt;/p&gt;
&lt;p&gt;若读取的Row不在Row Buffer中，则为冲突Conflict状态，将Row Buffer回写，然后再选中新的Row，读取数据&lt;/p&gt;
&lt;h2 id=&#34;chip&#34;&gt;Chip&lt;/h2&gt;
&lt;p&gt;由多个(2-16个)Bank组成，Bank共享总线（指令/地址/数据总线）&lt;/p&gt;
&lt;p&gt;每次只能读4或16 Bit&lt;/p&gt;
&lt;h2 id=&#34;rank-and-module&#34;&gt;Rank and Module&lt;/h2&gt;
&lt;p&gt;Module为DIMM内存条，连接在主板上，由一个或多个rank组成&lt;/p&gt;
&lt;p&gt;Rank由多个Chip构成，提高接口带宽，多个Chip共享地址和指令总线，有单独的数据总线&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20221003164422987.png&#34; alt=&#34;image-20221003164422987&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;多个Chip可以并行操作&lt;/p&gt;
&lt;p&gt;对于64 bit的读取，分配到多个Chip中同时读取&lt;/p&gt;
&lt;p&gt;对于多DIMM情况，可以先确定在哪根DIMM条中，再进行读取操作&lt;/p&gt;
&lt;h2 id=&#34;chanel&#34;&gt;Chanel&lt;/h2&gt;
&lt;p&gt;Bank之间为分时共享&lt;/p&gt;
&lt;p&gt;Channel为独立总线，数据可同时读写，每个Channel有一个Memory Controller&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.ipandai.club/image-20221003182243697.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221003182243697&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在同一个Channel中的DIMM数据分时共享&lt;/p&gt;
&lt;p&gt;一张比较清晰的结构关系图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.ipandai.club/image-20221003182445252.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221003182445252&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;同一个Channel可以连接多个DIMM条&lt;/p&gt;
&lt;h2 id=&#34;从cpu访问角度观察&#34;&gt;从CPU访问角度观察&lt;/h2&gt;
&lt;p&gt;Memory Channel中，在DIMM中Chip Selection选择访问的Rank，通过地址确定访问的数据&lt;/p&gt;
&lt;p&gt;Rank中的8个Chip每个都提供8 bit，共提供8 Byte访问&lt;/p&gt;
&lt;p&gt;由每个Chip中的bank选择器从8个bank中选择一个获取8 bit&lt;/p&gt;
&lt;p&gt;Bank中通过Row-Buffer来获取数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;延迟的产生：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU到controller的传输时间&lt;/li&gt;
&lt;li&gt;Controller延迟，请求队列和调度&lt;/li&gt;
&lt;li&gt;Controller到DRAM的传输时间（总线）&lt;/li&gt;
&lt;li&gt;DRAM 中Bank的延迟
&lt;ul&gt;
&lt;li&gt;选择某一行 Activate&lt;/li&gt;
&lt;li&gt;读取的时间&lt;/li&gt;
&lt;li&gt;Precharge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DRAM到CPU的传输时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要关注Bank中的延迟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;multiple-banks&#34;&gt;Multiple Banks&lt;/h2&gt;
&lt;p&gt;使DRAM访问并行&lt;/p&gt;
&lt;p&gt;由于不同Bank分时共享，可以使得Bank提前将row加载到Row Buffer中，提高利用率&lt;/p&gt;
&lt;h2 id=&#34;multiple-channels&#34;&gt;Multiple Channels&lt;/h2&gt;
&lt;p&gt;更容易实现&lt;/p&gt;
&lt;p&gt;提高总线带宽&lt;/p&gt;
&lt;p&gt;提高并发能力需要减少Bank和Channel的冲突问题，需要对编址策略进行优化&lt;/p&gt;
&lt;p&gt;比较直观的观察Multiple Banks优化的效果，达到Overlap的效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.ipandai.club/image-20221003204558855.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221003204558855&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;address-mapping&#34;&gt;Address Mapping&lt;/h2&gt;
&lt;p&gt;地址映射对DRAM并发能力的影响&lt;/p&gt;
&lt;p&gt;将访问DRAM中数据的地址进行排列，包含Channel、Row、Bank、Column&lt;/p&gt;
&lt;p&gt;核心思想：调整容易产生冲突的地址，使其相对靠后，还要兼顾其他问题&lt;/p&gt;
&lt;p&gt;将Column的高8位和低3位分离&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20221004202109741.png&#34; alt=&#34;image-20221004202109741&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;提高Row Buffer的利用率，倒数第二种比较常用&lt;/p&gt;
&lt;p&gt;对OS而言，由逻辑地址Virtual Address映射到物理地址&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Virtual Page Number &lt;/code&gt;-&amp;gt; &lt;code&gt;&amp;lt;Row,Bank&amp;gt;&lt;/code&gt;，可以通过调整映射算法来优化存储效率&lt;/p&gt;
&lt;h1 id=&#34;0x02-dram-refresh&#34;&gt;0x02 DRAM Refresh&lt;/h1&gt;
&lt;p&gt;由于电容中的电子持续泄漏，每隔一段时间重新写入数据，读取到row buffer再写回，刷新间隔一般为64ms&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;负面影响：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能耗增加&lt;/li&gt;
&lt;li&gt;性能减少，Refresh中内存不可用&lt;/li&gt;
&lt;li&gt;QoS影响，不能保证平稳&lt;/li&gt;
&lt;li&gt;刷新率使得DRAM容量的扩展受限&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;性能影响&#34;&gt;性能影响&lt;/h2&gt;
&lt;p&gt;刷新时Bank变得不可用，Row Buffer的占用&lt;/p&gt;
&lt;p&gt;在刷新结束前有长时间的暂定，有两种优化策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Burst Refresh 所有的行依次全部刷新&lt;/li&gt;
&lt;li&gt;Distributed Refresh 每行以固定的时间间隔在不同的时间进行刷新&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两种方式（集中式/分布式）的示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.ipandai.club/image-20221004153056950.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20221004153056950&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Distributed Refresh减少了等待时间&lt;/p&gt;
&lt;p&gt;随着设备容量的增加，消耗在Refresh上的时间/能耗占比越来越大&lt;/p&gt;
&lt;p&gt;目前应用的策略：Auto Refresh，每次只Refresh其中几行&lt;/p&gt;
&lt;p&gt;一些探索：刷新间隔的调整，64ms保证在最坏情况下的可靠性，在容忍存储单元出故障的前提下，可以适当提高刷新间隔，对于出错的单元采用更低的刷新间隔（不同存储单元采用不同刷新频率）&lt;/p&gt;
&lt;h1 id=&#34;0x03-memory-controller&#34;&gt;0x03 Memory Controller&lt;/h1&gt;
&lt;p&gt;位于CPU中&lt;/p&gt;
&lt;p&gt;基本功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证DRAM的正确性，刷新和时序timing&lt;/li&gt;
&lt;li&gt;遵循一定的时序约束（bank，总线，channel的冲突）来完成DRAM请求，转换请求为DRAM Command&lt;/li&gt;
&lt;li&gt;对请求进行调度提高性能&lt;/li&gt;
&lt;li&gt;管理电源能耗，开关Chip，管理电源模式&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20221004204322362.png&#34; alt=&#34;image-20221004204322362&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;由L2 Cache发送请求到Memory Controller，由一个Buffer来对请求进行缓存&lt;/p&gt;
&lt;h2 id=&#34;请求调度策略&#34;&gt;请求调度策略&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;FCFS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FR-FCFS,First Ready&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Row-Hit First，优先调度命中Row Buffer的请求，提高命中率&lt;/li&gt;
&lt;li&gt;FCFS 防止饥饿&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;row-buffer管理策略&#34;&gt;Row Buffer管理策略&lt;/h2&gt;
&lt;p&gt;Open Row 不预先执行Precharge回写&lt;/p&gt;
&lt;p&gt;Closed Row 预先回写&lt;/p&gt;
&lt;p&gt;自适应结合两种方案&lt;/p&gt;
&lt;h2 id=&#34;dram-controller的设计难点&#34;&gt;DRAM Controller的设计难点&lt;/h2&gt;
&lt;p&gt;时序约束&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20221005142053482.png&#34; alt=&#34;image-20221005142053482&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;防止冲突的发生&lt;/p&gt;
&lt;p&gt;Refresh操作&lt;/p&gt;
&lt;h2 id=&#34;能耗管理&#34;&gt;能耗管理&lt;/h2&gt;
&lt;p&gt;在不访问chip时切断供电&lt;/p&gt;
&lt;p&gt;厂商提供多种不同功耗的工作状态&lt;/p&gt;
&lt;p&gt;状态过渡时Chip无法被访问，因此会产生延迟&lt;/p&gt;
&lt;h1 id=&#34;0x04-nvm&#34;&gt;0x04 NVM&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;读&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;写&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;特点&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;e.g.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Charge Memory电荷存储器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通过检测电压V读取数据&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通过捕获电荷Q写入数据&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通过写放大器来读写，体积不能太小&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DRAM, Flash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Resistive Memory电阻式存储器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通过检测电阻R&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通过脉冲电流$\frac{dQ}{dt}$写入数据&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写数据调整阻抗&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PCM, STT-MRAM，memristors&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pcm&#34;&gt;PCM&lt;/h2&gt;
&lt;p&gt;通电加热会改变状态结晶态/非晶态，阻抗发生变化，表示0/1&lt;/p&gt;
&lt;h3 id=&#34;写&#34;&gt;写&lt;/h3&gt;
&lt;p&gt;两个状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SET：保持低电压，将介质变为结晶态&lt;/li&gt;
&lt;li&gt;RESET：提高温度变为非晶态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;读&#34;&gt;读&lt;/h3&gt;
&lt;p&gt;检测结晶态($10^3-10^4\Omega$)/非晶态($10^6-10^7\Omega$)的阻抗，两者数量级差距较大&lt;/p&gt;
&lt;h2 id=&#34;优势&#34;&gt;优势&lt;/h2&gt;
&lt;p&gt;比DRAM，Flash有更高的扩展能力，存储密度&lt;/p&gt;
&lt;p&gt;每个单元的存储密度提高&lt;/p&gt;
&lt;p&gt;Non-Volatile，不通电情况下可以保存10年以上（85摄氏度）&lt;/p&gt;
&lt;p&gt;不需要Refresh操作，低功耗&lt;/p&gt;
&lt;h3 id=&#34;mlc-pcm&#34;&gt;MLC-PCM&lt;/h3&gt;
&lt;p&gt;根据电阻划分多个bit，控制距离间隔&lt;/p&gt;
&lt;p&gt;延迟相较于DRAM高&lt;/p&gt;
&lt;p&gt;动态能耗高于DRAM&lt;/p&gt;
&lt;p&gt;写寿命较低&lt;/p&gt;
&lt;h2 id=&#34;stt-mram&#34;&gt;STT-MRAM&lt;/h2&gt;
&lt;p&gt;自旋距磁存储器&lt;/p&gt;
&lt;p&gt;电流改变磁介质方向，改变阻抗&lt;/p&gt;
&lt;p&gt;Reference Layer和Free Layer方向相同表示0，相反时表示1&lt;/p&gt;
&lt;h3 id=&#34;优势-1&#34;&gt;优势&lt;/h3&gt;
&lt;p&gt;容量大，造价低&lt;/p&gt;
&lt;p&gt;非易失&lt;/p&gt;
&lt;p&gt;功耗低&lt;/p&gt;
&lt;p&gt;缺点类似于PCM&lt;/p&gt;
&lt;h2 id=&#34;memristorsrramreram&#34;&gt;Memristors/RRAM/ReRAM&lt;/h2&gt;
&lt;p&gt;改变原子结构&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1xE411T7Dy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;存储技术基础—Main Memory I&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1xE411T7Dy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;存储技术基础—Main Memory II&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【存储技术基础】固态硬盘</title>
        <link>https://blog.ipandai.club/p/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/</link>
        <pubDate>Thu, 22 Sep 2022 09:36:42 +0800</pubDate>
        
        <guid>https://blog.ipandai.club/p/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/</guid>
        <description>&lt;p&gt;主要由Flash Memory 和FTL组成&lt;/p&gt;
&lt;p&gt;Non-Volatile Memory 提供低延迟持久性的内存/存储，也可以用来做内存&lt;/p&gt;
&lt;p&gt;根据延迟数量级，一般用PCM做内存，Flash Memory做外存&lt;/p&gt;
&lt;h1 id=&#34;0x00-flash-memory&#34;&gt;0x00 Flash Memory&lt;/h1&gt;
&lt;h2 id=&#34;闪存原理&#34;&gt;闪存原理&lt;/h2&gt;
&lt;h3 id=&#34;类型&#34;&gt;类型&lt;/h3&gt;
&lt;p&gt;NOR闪存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储密度低&lt;/li&gt;
&lt;li&gt;可字节改写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NAND闪存（主流）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储密度高&lt;/li&gt;
&lt;li&gt;不可覆盖写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用于外存需要较高的存储量级，一般用NAND&lt;/p&gt;
&lt;h3 id=&#34;闪存单元&#34;&gt;闪存单元&lt;/h3&gt;
&lt;p&gt;读：电压代表不同数值&lt;/p&gt;
&lt;p&gt;写：电子注入&lt;/p&gt;
&lt;p&gt;相比晶体管添加了浮栅门，保存电子&lt;/p&gt;
&lt;p&gt;原理其实比较简单，非电子系就不做太详细的研究了&lt;/p&gt;
&lt;p&gt;闪存页(4KB,8KB,16KB，读写单元)，阵列中的每一行&lt;/p&gt;
&lt;p&gt;闪存块(擦除单元)，由多个页组成的单元&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922124359358.png&#34; alt=&#34;image-20220922124359358&#34; style=&#34;zoom:33%;&#34; /&gt;
&lt;p&gt;选中行和列，然后将数据加载到Sense Amplifiers&lt;/p&gt;
&lt;p&gt;存储单元有两个阈值的电压，可以根据两个电压的中点作为读电压，2.5V读电压时左边通电，数据为1，右边则不通电，数据为0&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922124755447.png&#34; alt=&#34;image-20220922124755447&#34; style=&#34;zoom:25%;&#34; /&gt;
&lt;p&gt;Pass Through&lt;/p&gt;
&lt;p&gt;选取一个较大的电压，使得所有的单元都接通，数据为1，不影响其他行的状态&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922131649578.png&#34; alt=&#34;image-20220922131649578&#34; style=&#34;zoom:25%;&#34; /&gt;
&lt;p&gt;如图所示的存储结构，在第二行施加2.5V电压，其他行施加5V，最终读取数据为0011&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922134857889.png&#34; alt=&#34;image-20220922134857889&#34; style=&#34;zoom:33%;&#34;/&gt;
&lt;p&gt;上述为SLC，Single Level Cell，单存储单元&lt;/p&gt;
&lt;h3 id=&#34;多比特闪存&#34;&gt;多比特闪存&lt;/h3&gt;
&lt;p&gt;多比特闪存单元MLC，包含2Bits 4个Level的数据&lt;/p&gt;
&lt;p&gt;TLC 3 Bits 8个Level&lt;/p&gt;
&lt;p&gt;QLC 4 Bits 16个Level&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多比特使用格雷码来编码&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用格雷码使得相邻单元只有一位差异，方便纠错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多比特提高了存储密度，但是提高了错误率，因为施加的电压差距很小。可靠性会降低。&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922135516463.png&#34; alt=&#34;image-20220922135516463&#34; style=&#34;zoom:45%;&#34; /&gt;
&lt;p&gt;对于多比特的写，MLC分为高比特和低比特，对于低比特的状态加偏移电压确定高比特，在低比特时需要加的电压较大，操作难度低，运行速度快，在高比特时需要加的电压小，波形的间距小，操作难度高，运行的速度较慢。&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922140421405.png&#34; alt=&#34;image-20220922140421405&#34; style=&#34;zoom:40%;&#34; /&gt;
&lt;p&gt;对于多比特的读，先看lower bit，加一次电压，即可筛选出低位的0，1，再加两次电压确定upper bit。因为upper bit为0的在中间部分，为1的在两侧，因此需要在两个分界线分别加一次电压来确定upper bit为多少。&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922141455826.png&#34; alt=&#34;image-20220922141455826&#34; style=&#34;zoom:40%;&#34; /&gt;
&lt;h3 id=&#34;闪存&#34;&gt;闪存&lt;/h3&gt;
&lt;p&gt;Block的大小的一种配置：&lt;/p&gt;
&lt;p&gt;一行有两个Page，Upper Page和Lower Page，每个单元中，低位构成Lower Page，高位构成Upper Page，有128个单元，128K/8=16KB&lt;/p&gt;
&lt;p&gt;有64列bitlines，一个block的大小即为&lt;code&gt;16KB*64*2=2MB&lt;/code&gt;，一般按照此比例配置Block&lt;/p&gt;
&lt;p&gt;写入时按照固定顺序，写入高低页面相互独立，不能同时写，在写入加压时容易使相邻单元发生数据偏移，要降低错误率&lt;/p&gt;
&lt;p&gt;写入是需要先擦除再写入，擦除整个块&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922143608667.png&#34; alt=&#34;image-20220922143608667&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h4 id=&#34;特性&#34;&gt;特性&lt;/h4&gt;
&lt;h5 id=&#34;读写粒度&#34;&gt;读写粒度&lt;/h5&gt;
&lt;p&gt;闪存页读写粒度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4KB，8KB，16KB必须全部读取或者写入&lt;/li&gt;
&lt;li&gt;us延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;闪存块擦除力度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2MB擦除&lt;/li&gt;
&lt;li&gt;ms延迟，可以通过FTL来优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;不可覆盖写&#34;&gt;不可覆盖写&lt;/h5&gt;
&lt;p&gt;写前需要擦除，读写粒度与擦除粒度不同&lt;/p&gt;
&lt;p&gt;存在64bytes的OOB（out of bound area），保存ECC，用于纠错，容忍写入时部分比特出错&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922162139217.png&#34; alt=&#34;image-20220922162139217&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h5 id=&#34;有限次擦除&#34;&gt;有限次擦除&lt;/h5&gt;
&lt;p&gt;随着擦除次数的增加，存储单元不能可靠的保持状态（存储数据）。&lt;/p&gt;
&lt;p&gt;氧化层老化变薄，束缚电子能力变弱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耐久性 变薄地次数&lt;/li&gt;
&lt;li&gt;保持力 不通电可以放置的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SLC：10w次&lt;/p&gt;
&lt;p&gt;MLC：1w次&lt;/p&gt;
&lt;p&gt;TLC：1k次&lt;/p&gt;
&lt;p&gt;根据特性设计FTL固件来&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922164523965.png&#34; alt=&#34;image-20220922164523965&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h1 id=&#34;0x01-ftl&#34;&gt;0x01 FTL&lt;/h1&gt;
&lt;p&gt;固态硬盘整体构成&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922164728094.png&#34; alt=&#34;image-20220922164728094&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;SSD中的通道可以并行，通道中也可以并行读取，每个Plane中有寄存器，暂时存储准备好的数据。不同单元并行，因此内部带宽大&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922165354311.png&#34; alt=&#34;image-20220922165354311&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;垃圾回收&#34;&gt;垃圾回收&lt;/h2&gt;
&lt;p&gt;page对于OS而言，是写入时的block&lt;/p&gt;
&lt;p&gt;Page三种状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空闲 free page&lt;/li&gt;
&lt;li&gt;有效页 live/valid page&lt;/li&gt;
&lt;li&gt;无效页 dead/invalid page&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922184349456.png&#34; alt=&#34;image-20220922184349456&#34; style=&#34;zoom:25%;&#34; /&gt;
&lt;p&gt;需要擦除无效页，先移走有效页，然后再对一整行进行擦除，转为空闲&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220922184406162.png&#34; alt=&#34;image-20220922184406162&#34; style=&#34;zoom:25%;&#34; /&gt;
&lt;p&gt;时间开销：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制有效数据到$(R_{Latency}+W_{Latency})*N$，N是移动page的数量&lt;/li&gt;
&lt;li&gt;擦除产生的开销 ms级延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gc策略&#34;&gt;GC策略&lt;/h3&gt;
&lt;p&gt;要解决的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何时启动GC&lt;/li&gt;
&lt;li&gt;选中那些/多少Block进行GC&lt;/li&gt;
&lt;li&gt;有效的页如何被转写&lt;/li&gt;
&lt;li&gt;新数据写到哪里&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GC的时间开销：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块擦除的时间 ms&lt;/li&gt;
&lt;li&gt;有效页的复制时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;贪心策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到脏页最多的block来进行擦除&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Age&lt;/li&gt;
&lt;li&gt;Hot/Cold 数据隔离，分组问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;磨损均衡&#34;&gt;磨损均衡&lt;/h2&gt;
&lt;p&gt;优化寿命，有静态和动态策略&lt;/p&gt;
&lt;p&gt;静态：周期性的调整冷热数据存储的位置&lt;/p&gt;
&lt;p&gt;冷热数据的分区：将冷数据放在一起，热数据放在一起&lt;/p&gt;
&lt;h2 id=&#34;ftl简介&#34;&gt;FTL简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;维护映射，虚拟地址到物理地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用SRAM存储映射&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向上层隐藏擦除操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免原地更新-&amp;gt;异地更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新一个新页面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高性能的垃圾回收和擦除&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OOB有物理地址到虚拟地址的映射，用于掉电恢复，这里引用一段&lt;a class=&#34;link&#34; href=&#34;https://pages.cs.wisc.edu/~remzi/OSTEP/file-ssd.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wisc的OSTEP中的一段解释（44 Flash- based SSD）&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;OOB保存的在每个页中映射信息，当掉电或者重启时用它在内存中重建映射&lt;/p&gt;
&lt;p&gt;为了防止在重建时扫码整个SSD，可以使用日志或者检查点的方式来加速这个过程&lt;/p&gt;
&lt;p&gt;大致看了一下OSTEP，记得是jyy老师推荐的教材，希望以后有时间读一下&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220924141132556.png&#34; alt=&#34;image-20220924141132556&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;page-level-ftl&#34;&gt;Page-Level FTL&lt;/h3&gt;
&lt;p&gt;原理类似OS中的页表，由Logical Page Number查询页表得到Physical Page Number&lt;/p&gt;
&lt;p&gt;缺点是页表占用很大的空间&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220924152322358.png&#34; alt=&#34;image-20220924152322358&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;block-level-ftl&#34;&gt;Block-Level FTL&lt;/h3&gt;
&lt;p&gt;保持Block 到Block的映射&lt;/p&gt;
&lt;p&gt;先查找到对应的Block，在根据offset得到page，块内的页码偏移offset是固定的&lt;/p&gt;
&lt;img src=&#34;https://cdn.ipandai.club/image-20220924152259043.png&#34; alt=&#34;image-20220924152259043&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;优点是占用空间很小，缺点是GC负载增加&lt;/p&gt;
&lt;p&gt;原因：offset在不同Block中保持不变，在异地更新时，要选择其他block中相同的offset进行写入，如果选中的block已经存在数据，需要把数据迁移。【TODO 这里讲得不是非常的清楚】&lt;/p&gt;
&lt;h3 id=&#34;hybrid-ftl&#34;&gt;Hybrid FTL&lt;/h3&gt;
&lt;p&gt;对写入分为新/旧数据，新写入的数据用Page-Level Mapping效率高，写入Log Blocks作为缓冲，之后再更新到Data Blocks&lt;/p&gt;
&lt;p&gt;旧数据因为写入后更新相对不频繁，使用Block-Level Mapping，写入Data Blocks&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
