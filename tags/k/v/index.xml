<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>K/V on Coding_Panda&#39;s Blog</title>
        <link>https://blog.ipandai.club/tags/k/v/</link>
        <description>Recent content in K/V on Coding_Panda&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language><atom:link href="https://blog.ipandai.club/tags/k/v/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>redis实战读书笔记</title>
        <link>https://blog.ipandai.club/p/redis%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 03 Jan 2022 16:22:27 +0000</pubDate>
        
        <guid>https://blog.ipandai.club/p/redis%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;p&gt;redis基础知识以及一些应用场景总结&lt;/p&gt;
&lt;h1 id=&#34;基础&#34;&gt;基础&lt;/h1&gt;
&lt;p&gt;内存数据库&lt;/p&gt;
&lt;p&gt;优于memcached，速度上功能上&lt;/p&gt;
&lt;p&gt;基础数据结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String，List，Set，Hash，ZSet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://redis.io/commands&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;redis命令手册&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;string&#34;&gt;String&lt;/h2&gt;
&lt;p&gt;key-value&lt;/p&gt;
&lt;p&gt;指令GET，SET，DEL&lt;/p&gt;
&lt;h2 id=&#34;list&#34;&gt;LIST&lt;/h2&gt;
&lt;p&gt;key-list&lt;/p&gt;
&lt;p&gt;指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LPUSH，RPUSH 推入列表的左端和右端
LPUSH listname item
返回值为列表长度&lt;/li&gt;
&lt;li&gt;LPOP，RPOP，从左端和右端删除元素&lt;/li&gt;
&lt;li&gt;LINDEX，获取列表指定位置的元素
LINDEX listname 1&lt;/li&gt;
&lt;li&gt;LRANGE，获取给定范围内的所有元素
LRANGE listname 0 -1
0为开始索引，-1位结束索引&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;set&#34;&gt;SET&lt;/h2&gt;
&lt;p&gt;key-set&lt;/p&gt;
&lt;p&gt;SADD, SMEMBERS, SISMEMBER, SREM&lt;/p&gt;
&lt;h2 id=&#34;hash&#34;&gt;HASH&lt;/h2&gt;
&lt;p&gt;key-hash table&lt;/p&gt;
&lt;p&gt;内部也是key-value&lt;/p&gt;
&lt;p&gt;HSET, HGET, HGETALL, HDEL&lt;/p&gt;
&lt;h2 id=&#34;zset&#34;&gt;ZSET&lt;/h2&gt;
&lt;p&gt;key-zset&lt;/p&gt;
&lt;p&gt;ZADD, ZRANGE, ZRANGEBYSCORE, ZREM&lt;/p&gt;
&lt;h2 id=&#34;一个文章投票系统的设计&#34;&gt;一个文章投票系统的设计&lt;/h2&gt;
&lt;h3 id=&#34;基础功能设计&#34;&gt;基础功能设计&lt;/h3&gt;
&lt;p&gt;根据文章的发布时间和投票数量计算一个评分，根据该评分来排序和展示文章&lt;/p&gt;
&lt;p&gt;要求：如果有一篇文章符合有趣文章的要求（支持票至少200张），放在排行榜前100位至少一天&lt;/p&gt;
&lt;p&gt;构造分数&lt;/p&gt;
&lt;p&gt;$
score = up\ vote\ *C + post\ time
$&lt;/p&gt;
&lt;p&gt;常量C可以选择432&lt;/p&gt;
&lt;p&gt;分析：一天的秒数为86400，文章达到有趣需要200票，可以利用86400/200=432来作为每个投票对得分的贡献&lt;/p&gt;
&lt;p&gt;保存评分以及存储文章信息&lt;/p&gt;
&lt;p&gt;使用hash结构存储文章的标题，文章的url，发布文章的用户，发布时间，得票数量等信息&lt;/p&gt;
&lt;p&gt;关于key的设置，可以使用任意字符作为分隔符，如&lt;code&gt;article:ID&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用两个zset，其中一个成员为文章id，分值为文章的发布时间，另一个成员为文章id，分值为文章的评分，使得网站可以按照发布时间和评分两种方式展示文章&lt;/p&gt;
&lt;p&gt;防止用户重复投票，建立已投票用户名单，使用set结构，key为&lt;code&gt;voted:article_id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;需要用到的一些指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ZSCORE 获取文章发布时间的有序集合，判断发布时间是否在一周内&lt;/li&gt;
&lt;li&gt;SADD 若可投票，将用户添加到已投票的set中，操作成功则说明用户未向该文章投过票&lt;/li&gt;
&lt;li&gt;ZINCRBY 将文章的评分增加432&lt;/li&gt;
&lt;li&gt;HINCRBY 对hash结构中的文章投票数量进行更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;发布获取文章&#34;&gt;发布获取文章&lt;/h3&gt;
&lt;p&gt;发布文章需要新增id，使用计数器，执行incr指令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;incr keyname
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以得到计数器++之后的值&lt;/p&gt;
&lt;p&gt;使用sadd将发布者id添加到文章投票的用户集合中（避免自己给自己投票）&lt;/p&gt;
&lt;p&gt;集合的过期时间为一周，一周后自动释放expire&lt;/p&gt;
&lt;p&gt;HMSET存储文章相关信息&lt;/p&gt;
&lt;p&gt;执行zadd添加文章初始评分到保存评分的zset&lt;/p&gt;
&lt;p&gt;执行zadd添加文章发布时间到保存时间的zset&lt;/p&gt;
&lt;p&gt;使用HGETALL获取存储在hash中的文章结构&lt;/p&gt;
&lt;p&gt;使用ZREVRANGE取出评分最高的文章和最新发布的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用ZREVRANGE获取文章的id&lt;/li&gt;
&lt;li&gt;使用HGETALL获取详细内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文章分组&#34;&gt;文章分组&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
