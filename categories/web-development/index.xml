<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Web Development - Category - Coding Panda&#39;s Blog</title>
    <link>https://zhiwayzhang.github.io/categories/web-development/</link>
    <description>Web Development - Category - Coding Panda&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>zhiweizhang@hust.edu.cn (Zhiwei Zhang)</managingEditor>
      <webMaster>zhiweizhang@hust.edu.cn (Zhiwei Zhang)</webMaster><lastBuildDate>Tue, 30 Aug 2022 09:27:53 &#43;0800</lastBuildDate><atom:link href="https://zhiwayzhang.github.io/categories/web-development/" rel="self" type="application/rss+xml" /><item>
  <title>使用GitHub Workflow工作流自动部署静态博客</title>
  <link>https://zhiwayzhang.github.io/posts/github_workflow/</link>
  <pubDate>Tue, 30 Aug 2022 09:27:53 &#43;0800</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/github_workflow/</guid>
  <description><![CDATA[Background 自很久以前就开始使用静态博客，并且在GitHub Pages上部署后同时在服务器上进行同步，每次push新的修改后都需要在服务器上手动pull，因此决定探究使用Github Workflow自动化部署静态博客的解决方案。
Intro Github Workflows 在仓库的目录下，创建.github/workflows目录，目录内存放需要使用的工作流配置文件。
例如：
1 2 3 .github └── workflows └── rsync-action.yml Rsync Action Github提供了很全面的Actions操作，包括Hooks功能，支持在对仓库进行push、merge等操作后触发对应的脚本。对于本需求，我们需要使用GitHub的Rsync Action插件。
插件主页 Rsync Deployments Action
包含如下参数：
switches* - The first is for any initial/required rsync flags, eg: -avzr --delete rsh - Remote shell commands path - The source path. Defaults to GITHUB_WORKSPACE and is relative to it remote_path* - The deployment target path remote_host* - The remote host remote_port - The remote port.]]></description>
</item>
<item>
  <title>127.0.0.1,localhost和0.0.0.0暨🐼一次两次的神神秘秘的debug记录</title>
  <link>https://zhiwayzhang.github.io/posts/localhost/</link>
  <pubDate>Mon, 26 Jul 2021 22:23:38 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/localhost/</guid>
  <description><![CDATA[前记 潘达某天在本机docker部署了他的服务，但是发现无论如何都无法ping通，他冥(疯)思(狂)苦(谷)想(歌)，逛遍了GitHub上的各种issues，stack overflow上的各种回答，各种博客文章，都没有解决他的问题，直到他的mentor来到他的电脑前，一通命令猛如虎啊，发现他竟然在docker内监听了容器中的127.0.0.1的端口，那必然会访问不到，检查发现原来是在服务的config中写了magic number，让服务开在了127.0.0.1，在本地这样必然是没问题的，但是如果要与外部进行通信，那就要改成0.0.0.0了。
又是一天，潘达又部署起了他的rpc服务，想在服务器上部署一个微服务然后本机去访问，测试框架是否可以通过域名通信各个微服务，然而，服务器上启动成功，本地依然迟迟无法连接，上来就是一个curl: (7) Failed to connect to ababab.ababab port ababa: Connection refused，安全组也放行了对应的端口，然后他看到了一行127.0.0.1，但是他感觉不是这个问题，继续debug，然后再次呼叫他的mentor，希望得到帮助，还是一顿操作猛如虎，找到了那个127.0.0.1的监听服务，乐。
于是，这篇blog就诞生了。 127.0.0.1 和 localhost 127.0.0.1是回路地址中的一个，在计算机中127.*.*.*被称为回路地址，所有对这些地址的请求都会让本机接收，最最重要的是，外部设备也不能通过这个地址访问到本机的服务。 localhost其实是一个域名，他一般指代本机的网络，大多数机器都会默认localhost指向127.0.0.1，可以自行修改为其他地址。
0.0.0.0 可能我们都会以为localhost为本地的网络地址，但实际上真正的本地网络是0.0.0.0，但是他是不能被ping通的。在服务器中，0.0.0.0并不是一个真实的的IP地址，它表示本机中所有的ipv4地址。监听0.0.0.0的端口，就是监听本机中所有IP的端口。如果服务监听在0.0.0.0，那么外部访问的所有ip都可以通过对应的端口访问这个服务。
所以问题得到了解答，如果是在本机的话，127.0.0.1的话显然是没问题的，但是如果要将服务上云或者容器，就需要进行调整，首先要避开127.0.0.1，再根据是否只允许内网ip访问进行端口映射和服务监听。
后记 这两次问题前前后后折腾了半天，本想自己找到解决办法，查了不少资料后还是要寻求运维☁️的帮助，其实问题并不是很大，还是自己的知识储备不够，不能准确定位的问题的所在。另外，计网应该开始看了。🐼。]]></description>
</item>
<item>
  <title>OJ部署debug记录</title>
  <link>https://zhiwayzhang.github.io/posts/debugnote/</link>
  <pubDate>Sat, 03 Apr 2021 22:22:14 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/debugnote/</guid>
  <description><![CDATA[<p>学校重构之后的OJ终于进入了前后端对接的阶段，经过了一周的紧张对接环境，项目依然是(正在稳定推进的阶段)，和前端对接口的一周里，我感觉到自己之前工作的不足，在此做出反思，以后要改掉这些错误。同时在和运维一起部署的过程中，也发现了许许多多的问题，在此一并记录一下。</p>]]></description>
</item>
<item>
  <title>记录一次Go项目的部署</title>
  <link>https://zhiwayzhang.github.io/posts/godeploy/</link>
  <pubDate>Tue, 30 Mar 2021 12:23:42 &#43;0000</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/godeploy/</guid>
  <description><![CDATA[最近写了一个go项目，需要部署到服务器进行测试，如果只是go run main.go难免也太麻烦了点，于是学习了项目部署的相关知识。 项目的部署有多种方式，Jenkins,nginx等方式，本文只讲解一下简单的shell脚本部署。
系统信息 系统信息: CentOS Linux release 8.3.2011 x86_64 Go version: go version go1.14.12 linux/amd64
几条命令的介绍 nohup nohup命令的全称为no hang up不挂起，可以在系统后台不挂断的运行命令，退出终端后程序也会正常运行。 语法格式： nohup ./xxx &gt; xxx.log 2&gt;&amp;1 &amp; 解释： &gt; xxx.log表示将输出重定向至该文件，可以记录运行时的日志 2&gt;&amp;1将标准错误2重定向到标准输出&amp;1，然后标准输出&amp;1再被重定向至xxx.log文件
git pull git pull origin dev 为了方便项目的及时更新，使用改名了保证运行时与上游仓库的代码保持一致。
ps ps命令为 process status,可以查看系统当前的进程状态
例如
1 2 3 4 5 6 ~&gt; ps PID TTY TIME CMD 255873 pts/0 00:00:02 zsh 258517 pts/0 00:00:00 sh 258519 pts/0 00:00:00 OnlineJudge 263021 pts/0 00:00:00 ps 我们将用ps命令与grep等命令筛选出项目的pid ps命令有很多参数选择，这里介绍一下用到的两条命令:]]></description>
</item>
<item>
  <title>博客迁移记录</title>
  <link>https://zhiwayzhang.github.io/posts/first/</link>
  <pubDate>Sat, 13 Mar 2021 23:28:31 &#43;0800</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/first/</guid>
  <description><![CDATA[从hexo到hugo 从高中开始就采用hexo+GitHub Pages的方式搭建博客，hexo确实很强大，但是由于需要借助node的原因，用起来总是没那么舒服，尤其是在换了电脑之后，配置环境比较麻烦，npm install也比较臃肿，于是决定采用hugo。
hugo是一个使用go语言开发的博客框架，由于是go编写的，所以渲染速度总的来说比hexo快不少，而且安装起来也很简单，也有不少美观的主题，方便部署到各个平台。
环境配置 系统环境：macOS arm64 (M1 Silicon) Go Version: go1.16beta1 darwin/arm64 homebrew版本：3.0.5
我是用的为arm平台的golang，没有测试过用intel平台的go版本进行配置
安装hugo 1 brew install hugo 创建一个新网站 1 hugo new site blog 添加一个主题 1 2 git init // 初始化git git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack //主题下载 添加篇文章 我的主题文章保存在了content文件夹中的post目录
1 hugo new /post/first.md 本地进行渲染预览 1 hugo server -D 之后可以通过打开localhost:1313来进行预览
部署到GitHub仓库 1 2 3 4 5 6 7 hugo -D cd public git init git add . git commit -m &#34;first commit&#34; git remote add origin https://github.]]></description>
</item>
</channel>
</rss>
