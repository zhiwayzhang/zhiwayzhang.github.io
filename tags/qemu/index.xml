<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>QEMU - Tag - Coding Panda&#39;s Blog</title>
    <link>https://zhiwayzhang.github.io/tags/qemu/</link>
    <description>QEMU - Tag - Coding Panda&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>zhiweizhang@hust.edu.cn (Zhiwei Zhang)</managingEditor>
      <webMaster>zhiweizhang@hust.edu.cn (Zhiwei Zhang)</webMaster><lastBuildDate>Sun, 12 Mar 2023 12:36:08 &#43;0800</lastBuildDate><atom:link href="https://zhiwayzhang.github.io/tags/qemu/" rel="self" type="application/rss+xml" /><item>
  <title>[FEMU] FEMU Blackbox SSD源码阅读</title>
  <link>https://zhiwayzhang.github.io/posts/femu-bbssd/</link>
  <pubDate>Sun, 12 Mar 2023 12:36:08 &#43;0800</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/femu-bbssd/</guid>
  <description><![CDATA[本文记录FEMU blackbox ssd（ssd对主机透明）的源码阅读。
bb.c 用于注册bbssd，在hw/femu/femu.c&gt;nvme_register_extesions()中执行
1 2 3 4 5 6 7 8 9 10 11 12 static int nvme_register_extensions(FemuCtrl *n) { if (OCSSD(n)) { ... } ... } else if (BBSSD(n)) { nvme_register_bbssd(n); } ... return 0; } 这个FemuCtrl *n结构包含了很多内容，本质上是一个用于线程之间同步/传值的结构
1 2 3 4 5 6 7 8 9 10 11 12 13 14 int nvme_register_bbssd(FemuCtrl *n) { n-&gt;ext_ops = (FemuExtCtrlOps) { .state = NULL, .init = bb_init, .exit = NULL, .]]></description>
</item>
<item>
  <title>FEMU环境配置</title>
  <link>https://zhiwayzhang.github.io/posts/femu-demo/</link>
  <pubDate>Sun, 11 Dec 2022 16:10:32 &#43;0800</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/femu-demo/</guid>
  <description><![CDATA[本文主要参考FEMU仓库README
0x00 Intro FEMU架构图
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 +--------------------+ | VM / Guest OS | | | | | | NVMe Block Device | +--------^^----------+ || PCIe/NVMe || +------------------------------vv----------------------------+ | +---------+ +---------+ +---------+ +---------+ +------+ | | | Blackbox| | OCSSD | | ZNS-SSD | | NoSSD | | ... | | | +---------+ +---------+ +---------+ +---------+ +------+ | | FEMU NVMe SSD Controller | +------------------------------------------------------------+ FEMU是弗吉尼亚理工学院的Huaicheng LI教授团队开发的一款SSD模拟器，FEMU的论文此前进行过总结[[FAST'18] FEMU闪存模拟系统介绍](https://blog.]]></description>
</item>
<item>
  <title>[FAST&#39;18] FEMU闪存模拟系统介绍</title>
  <link>https://zhiwayzhang.github.io/posts/femu-paper/</link>
  <pubDate>Wed, 23 Nov 2022 19:44:51 &#43;0800</pubDate>
  <author>Zhiwei Zhang</author>
  <guid>https://zhiwayzhang.github.io/posts/femu-paper/</guid>
  <description><![CDATA[0x00 Everyday English LOC == line of code
Guest OS == VM
intricacies 错综复杂
drop-in replacement 通常表示直接替换，并且替换后不会产生影响，甚至会有一些新的功能
leverage 对&hellip;产生影响；一般也可以理解为 充分利用，比utilize语气强一些
0x01 Intro FEMU是用于软硬件全栈的SSD研究模拟平台，基于QEMU开发，相比于OpenChannel SSD实现了较高的准确率
此前的SSD研究模拟工具大多不开源，可扩展性差，研究成本高，并且已经过时。
FEMU首先开源免费，并且有较高的准确度，同时可伸缩性强，最大支持32 I/O 线程并模拟32个并行的SSD channels/chips，可扩展性高，得益于基于QEMU的优点，FEMU可以支持针对于SSD的研究，针对os 内核的研究，或者基于os内核和SSD的研究。
FEMU GitHub 仓库地址： https://github.com/vtess/FEMU
0x02 FEMU FEMU本身仅有3929行代码，基于QEMU v2.9，FEMU近些年的更新也主要为修复一些bug、合并QEMU的版本，将传统的App+宿主机+SSD的研究架构转变为了App+虚拟机+FEMU。
FEMU中的FTL模块、GC、I/O调度主要基于VSSIMVSSIM: Virtual machine based SSD simulator | IEEE Conference Publication | IEEE Xplore
可伸缩性 对于当前的高并行化的SSD，可伸缩性对模拟闪存至关重要。通过virtio和dataplane接口进行模拟，不能达到足够的可伸缩性，同时存在较高的延迟。
在QEMU中存在的两个主要问题是
QEMU使用传统的trap-and-emulate方法进行I/O模拟，虚拟机的NVMe驱动通过doorbell寄存器告知QEMU模拟的I/O设备。该doorbell将引起开销较大的VM-exit，同时在I/O完成阶段，也会产生该调用。 QEMU使用异步I/O来实现read/write，AIO的执行需要避免QEMU的I/O被阻塞，当在存储后端是基于RAM的镜像时，AIO产生的负载尤为明显 解决方案为：
使用基于轮询的方案，并且禁用了虚拟机的doorbell写操作，通过一个线程来轮询存储设备队列的状态，避免了VM-exit 不使用虚拟的镜像文件，使用自定义的以RAM为后端的存储模拟，定义在QEMU的堆空间中，将QEMU中DMA修改为从QEMU heap中读写数据，这个改变对VM来说是透明的 准确度 延迟模拟 当I/O请求到达后，FEMU发起DMA R/W，并用模拟的完成时间$(T_{endio})$对I/O请求进行标记，添加到endio queue中，队列按照I/O的完成时间进行排序。一旦I/O请求的预估完成时间大于当前时间，会由专门的end I/O 处理线程负责将其通过中断发送给虚拟机。
FEMU对每个I/O请求都设置了+50us的延迟。
延迟模型 对于$T_{endio}$的计算：]]></description>
</item>
</channel>
</rss>
